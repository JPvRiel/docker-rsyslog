  1: # rsyslog configuration file
  2: 
  3: ## Global Directives and defaults
  4: 
  5: # Where to place auxiliary files
  6: global(workDirectory="/var/lib/rsyslog")
  7: 
  8: # Use default timestamp format (can be overidden per rule set)
  9: module(load="builtin:omfile" Template="RSYSLOG_TraditionalFileFormat")
 10: 
 11: # Include config files in /etc/rsyslog.d/
 12: include(file="/etc/rsyslog.d/*.conf" mode="optional")
##< start of include directive: include(file="/etc/rsyslog.d/*.conf" mode="optional")
##^ expanding file: /etc/rsyslog.d/30-globals.conf
  1: 
  2: # Collect stats - rsyslog docs warn to load this module first before others (but might only be applicable to legacy config)
  3: module(
  4:   load="impstats"
  5:   interval="60"
  6:   resetCounters="on"
  7:   Format="cee"
  8:   log.syslog="on"
  9:   log.file="/var/log/impstats/metrics.log"
 10:   ruleset="syslog_stats"
 11: )
 12: 
 13: # Load extra parser modules which the peoples might want to use in the parser chain - will waste a bit of memory, but keeps logic simpler
 14: module(load="pmlastmsg")
 15: module(load="pmaixforwardedfrom")
 16: module(load="pmciscoios")
 17: module(load="pmnull")
 18: 
 19: module(load="mmjsonparse")
 20: # Parse RFCR424 structured data
 21: module(load="mmpstrucdata")
 22: 
 23: # Globals
 24: global(
 25:   parser.permitSlashInProgramName="on"
 26:   parser.escapeControlCharacterTab="off"
 27:   preserveFQDN="on"
 28:   maxMessageSize="65536"
 29:   action.reportSuspension="on"
 30:   senders.keepTrack="on"
 31:   senders.timeoutAfter="86400"
 32:   senders.reportGoneAway="on"
 33:   shutdown.enable.ctlc="on"
 34:   processInternalMessages="on"
 35: )
##^ expanding file: /etc/rsyslog.d/50-output_format.conf
  1: # Output templates
  2: # Built-in templates at https://www.rsyslog.com/doc/v8-stable/configuration/templates.html#reserved-template-names
  3: # E.g.
  4: # - RSYSLOG_TraditionalFileFormat
  5: # - RSYSLOG_FileFormat
  6: # - RSYSLOG_TraditionalForwardFormat
  7: # - RSYSLOG_SyslogProtocol23Format
  8: 
  9: # Simple raw message template (might be useful for passing on messages unprocessed)
 10: template(name="RawMsg" type="string" string="%rawmsg%\n")
 11: 
 12: # Misc templates (e.g. for calling via exec_template)
 13: # TODO: If need be
 14: 
 15: # Standard example of RFC5424
 16: # Note, RSYSLOG_SyslogProtocol23Format is the built-in reserved template name for a draft of RFC5424, so the above is more or less identical to that
 17: template(name="TmplRFC5424" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %hostname% %app-name% %procid% %msgid% %structured-data% %msg%\n")
 18: 
 19: # RFC5424 with syslog relay and own custom meta-data pre-pended to the structured data element
 20: # Like RSYSLOG_SyslogProtocol23Format, but with a special extra structured data field to append structured data.
 21: # Use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html
 22: # Regex needed to deal with structured data being null '-' and needing to append/replace null.
 23: # `%structured-data:R,ERE,0,BLANK:[[].*--end%` avoids appending a null char '-' if there wasn't any pre-existing structured data.
 24: # See http://www.rsyslog.com/doc/v8-stable/configuration/nomatch.html
 25: template(
 26:   name="TmplRFC5424Meta" type="string"
 27:   string="<%pri%>1 %timestamp:::date-rfc3339% %$.hostname% %$.app-name% %procid% %msgid% [syslog-relay@16543 timegenerated=\"%timegenerated:::date-rfc3339%\" fromhost=\"%fromhost%\" fromhost-ip=\"%fromhost-ip%\" myhostname=\"%$myhostname%\" inputname=\"%inputname%\" format=\"%$.syslog-relay!format%\" pri-valid=\"%$.syslog-relay!pri-valid%\" header-valid=\"%$.syslog-relay!header-valid%\" json-msg-parsed=\"%$.syslog-relay!json-msg-parsed%\" tls=\"%$.syslog-relay!tls%\" authenticated-client=\"%$.syslog-relay!authenticated-client%\"]%structured-data:R,ERE,0,BLANK:[[].*--end% %msg%\n"
 28: )
 29: template(
 30:     name="TmplRFC5424EndMetaShort" type="string"
 31:     string="<%pri%>1 %timestamp:::date-rfc3339% %$.hostname% %$.app-name% %procid% %msgid% %structured-data% %msg:::drop-last-lf% @meta:[fromhost=\"%fromhost%\", fromhost-ip=\"%fromhost-ip%\", timegenerated=\"%timegenerated:::date-rfc3339%\"]\n"
 32: )
 33: # RFC3164 template enforcing a colon ending the syslog tag since some agents like Microsoft OMS don't gracefully accommodate all variations of the RFC
 34: template(
 35:     name="TmplRFC3164EndMetaShort" type="string"
 36:     string="<%pri%>%timestamp:::date-rfc3164% %$.hostname% %syslogtag:F,58,1:1,32%:%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf% @meta:[fromhost=\"%fromhost%\", fromhost-ip=\"%fromhost-ip%\", timegenerated=\"%timegenerated:::date-rfc3339%\"]"
 37: )
 38: # Raw, forward as-is with metadata at the end
 39: template(
 40:   name="RawMsgEndMeta" type="string"
 41:   string="%rawmsg% @meta:[timegenerated=\"%timegenerated:::date-rfc3339%\", fromhost=\"%fromhost%\", fromhost-ip=\"%fromhost-ip%\", myhostname=\"%$myhostname%\", inputname=\"%inputname%\", format=\"%$.syslog-relay!format%\", pri-valid=\"%$.syslog-relay!pri-valid%\", header-valid=\"%$.syslog-relay!header-valid%\", json-msg-parsed=\"%$.syslog-relay!json-msg-parsed%\", tls=\"%$.syslog-relay!tls%\", authenticated-client=\"%$.syslog-relay!authenticated-client%\"]\n"
 42: )
 43: template(
 44:   name="RawMsgEndMetaShort" type="string"
 45:   string="%rawmsg% @meta:[fromhost=\"%fromhost%\", fromhost-ip=\"%fromhost-ip%\", timegenerated=\"%timegenerated:::date-rfc3339%\"]\n"
 46: )
 47: 
 48: # JSON templates
 49: 
 50: # Make sure the message content is escaped to be safely interpreted as JSON
 51: # Note:
 52: # - NB! Rainerscript only supports setting quoted variables and, while jsonf can now outputs specific JSON data types after https://github.com/rsyslog/rsyslog/issues/2827 was closed, those features are not available to the simpler string type templates and can only be used with list type templates.
 53: # - The template jsonf datatype option can be used in templates to coerce types upon output, but rainerscript config still treats/reads everything like strings.
 54: # - To get integer or boolean JSON types requires manually building a JSON field, i.e. otherwise { "boolean": true } gets quoted as { "boolean": "true" } or using and awkward combination of abuseing the cnum() function, e.g. 'set $.myprop = cnum(0)', and then using 'property(name="$.myprop" outname="myprop" format="jsonf" datatype="bool")'
 55: # - The 'bool' datatype does not treat string "false" as a literal false and only interprets "0" or the empty string "" as false.
 56: # - Therefore it's not adaptable to use for non-JSON output that needs a literal string 'false'.
 57: # - See https://github.com/rsyslog/rsyslog/issues/3836
 58: # - See https://www.rsyslog.com/doc/v8-stable/configuration/templates.html#property-statement
 59: # Due to this, and some values being used in both JSON and plaintext output template choices, manually crafted templates instead of using a jsonf datatype is performed.
 60: # While bool and int JSON types are used, for RFC5424, `-` represents null and is left as when the field is flat (not a nested object).
 61: # Structured data element handling is complex and involves 2 different fields
 62: # - 'structured-data' will be the string representation (not parsed to JSON) and null represented as string character `-`.
 63: # - 'rfc5424-sd' will be the JSON parsed nested object (if rsyslog_mmpstrucdata is enabled) and null represented as literal string `"null"`
 64: # - If the structured data element is `-` it's 'structured-data' property is left as a string `-` else
 65: # - Downstream systems like elasticsearch will have data mapping conflicts if it expects a json object (e.g. nested field) but instead gets a plain string (e.g. `"null"`). Logstash can coerce/remove the "null" field when present to avoid the issue.
 66: 
 67: # Output the full native rsyslog JSON message object
 68: template(name="TmplRSyslogJSON" type="string" string="%jsonmesg%\n")
 69: 
 70: # Output a subset of the native rsyslog JSON message fields
 71: # Note:
 72: # - JSON $! tree output will output empty enclosing brackets { } if $! doesn't have any JSON values set which will cause invalid JSON, so strip these by removing first 2 chars '{ ' and allowing the end closing bracket to occur in case this is indeed empty.
 73: # - Handle cases where metadata or structured data is to be added
 74: # - if metadata is enabled, RFC3164 assumed hostname parsing that might be incorrect are replaced with local var $.hostname = $fromhost instead of standard $hostname property when headers are detected as non-conformant
 75: # - now that JSON types are formally supported, be more explicit with data types
 76: template(name="TmplJSON" type="list") {
 77:   constant(value="{ ")
 78:   property(name="syslogfacility" format="jsonf" datatype="number")
 79:   constant(value=", ")
 80:   property(name="syslogfacility-text" format="jsonf")
 81:   constant(value=", ")
 82:   property(name="syslogseverity" format="jsonf" datatype="number")
 83:   constant(value=", ")
 84:   property(name="syslogseverity-text" format="jsonf")
 85:   constant(value=", ")
 86:   property(name="timestamp" dateFormat="rfc3339" format="jsonf")
 87:   constant(value=", ")
 88:   property(name="$.hostname" outname="hostname" format="jsonf")
 89:   constant(value=", ")
 90:   property(name="$.app-name" outname="app-name" format="jsonf")
 91:   constant(value=", ")
 92:   property(name="procid" format="jsonf" datatype="string")
 93:   constant(value=", ")
 94:   property(name="msgid" format="jsonf" datatype="string")
 95:   constant(value=", ")
 96:   constant(value="\"syslog-relay\": { ")
 97:   property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
 98:   constant(value=", ")
 99:   property(name="fromhost" format="jsonf")
100:   constant(value=", ")
101:   property(name="fromhost-ip" format="jsonf")
102:   constant(value=", \"myhostname\":\"")
103:   property(name="$myhostname" format="jsonr")
104:   constant(value="\", ")
105:   property(name="inputname" format="jsonf")
106:   constant(value=", \"format\":\"")
107:   property(name="$.syslog-relay!format" format="jsonr")
108:   constant(value="\", \"pri-valid\":")
109:   property(name="$.syslog-relay!pri-valid")
110:   constant(value=", \"header-valid\":")
111:   property(name="$.syslog-relay!header-valid")
112:   constant(value=", \"json-msg-parsed\":")
113:   property(name="$.syslog-relay!json-msg-parsed")
114:   constant(value=", \"tls\":")
115:   property(name="$.syslog-relay!tls")
116:   constant(value=", \"authenticated-client\":")
117:   property(name="$.syslog-relay!authenticated-client")
118:   constant(value=" }, ")
119:   
120:   property(name="msg" format="jsonf")
121:   constant(value=", ")
122:   property(name="$!" position.from="2")
123:   constant(value="\n")
124: }
125: 
126: template(name="TmplJSONRawMsg" type="list") {
127:   constant(value="{ ")
128:   property(name="syslogfacility" format="jsonf" datatype="number")
129:   constant(value=", ")
130:   property(name="syslogfacility-text" format="jsonf")
131:   constant(value=", ")
132:   property(name="syslogseverity" format="jsonf" datatype="number")
133:   constant(value=", ")
134:   property(name="syslogseverity-text" format="jsonf")
135:   constant(value=", ")
136:   property(name="timestamp" dateFormat="rfc3339" format="jsonf")
137:   constant(value=", ")
138:   property(name="$.hostname" outname="hostname" format="jsonf")
139:   constant(value=", ")
140:   property(name="$.app-name" outname="app-name" format="jsonf")
141:   constant(value=", ")
142:   property(name="procid" format="jsonf" datatype="string")
143:   constant(value=", ")
144:   property(name="msgid" format="jsonf" datatype="string")
145:   constant(value=", ")
146:   constant(value="\"syslog-relay\": { ")
147:   property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
148:   constant(value=", ")
149:   property(name="fromhost" format="jsonf")
150:   constant(value=", ")
151:   property(name="fromhost-ip" format="jsonf")
152:   constant(value=", \"myhostname\":\"")
153:   property(name="$myhostname" format="jsonr")
154:   constant(value="\", ")
155:   property(name="inputname" format="jsonf")
156:   constant(value=", \"format\":\"")
157:   property(name="$.syslog-relay!format" format="jsonr")
158:   constant(value="\", \"pri-valid\":")
159:   property(name="$.syslog-relay!pri-valid")
160:   constant(value=", \"header-valid\":")
161:   property(name="$.syslog-relay!header-valid")
162:   constant(value=", \"json-msg-parsed\":")
163:   property(name="$.syslog-relay!json-msg-parsed")
164:   constant(value=", \"tls\":")
165:   property(name="$.syslog-relay!tls")
166:   constant(value=", \"authenticated-client\":")
167:   property(name="$.syslog-relay!authenticated-client")
168:   constant(value=" }, ")
169:   
170:   property(name="rawmsg" format="jsonf")
171:   constant(value=", ")
172:   property(name="$!" position.from="2")
173:   constant(value="\n")
174: }
175: 
176: template(name="TmplJSONMsgAndRawMsg" type="list") {
177:   constant(value="{ ")
178:   property(name="syslogfacility" format="jsonf" datatype="number")
179:   constant(value=", ")
180:   property(name="syslogfacility-text" format="jsonf")
181:   constant(value=", ")
182:   property(name="syslogseverity" format="jsonf" datatype="number")
183:   constant(value=", ")
184:   property(name="syslogseverity-text" format="jsonf")
185:   constant(value=", ")
186:   property(name="timestamp" dateFormat="rfc3339" format="jsonf")
187:   constant(value=", ")
188:   property(name="$.hostname" outname="hostname" format="jsonf")
189:   constant(value=", ")
190:   property(name="$.app-name" outname="app-name" format="jsonf")
191:   constant(value=", ")
192:   property(name="procid" format="jsonf" datatype="string")
193:   constant(value=", ")
194:   property(name="msgid" format="jsonf" datatype="string")
195:   constant(value=", ")
196:   constant(value="\"syslog-relay\": { ")
197:   property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
198:   constant(value=", ")
199:   property(name="fromhost" format="jsonf")
200:   constant(value=", ")
201:   property(name="fromhost-ip" format="jsonf")
202:   constant(value=", \"myhostname\":\"")
203:   property(name="$myhostname" format="jsonr")
204:   constant(value="\", ")
205:   property(name="inputname" format="jsonf")
206:   constant(value=", \"format\":\"")
207:   property(name="$.syslog-relay!format" format="jsonr")
208:   constant(value="\", \"pri-valid\":")
209:   property(name="$.syslog-relay!pri-valid")
210:   constant(value=", \"header-valid\":")
211:   property(name="$.syslog-relay!header-valid")
212:   constant(value=", \"json-msg-parsed\":")
213:   property(name="$.syslog-relay!json-msg-parsed")
214:   constant(value=", \"tls\":")
215:   property(name="$.syslog-relay!tls")
216:   constant(value=", \"authenticated-client\":")
217:   property(name="$.syslog-relay!authenticated-client")
218:   constant(value=" }, ")
219:   
220:   property(name="msg" format="jsonf")
221:   constant(value=", ")
222:   property(name="rawmsg" format="jsonf")
223:   constant(value=", ")
224:   property(name="$!" position.from="2")
225:   constant(value="\n")
226: }
227: 
228: # Special templates for handling rsyslog errors
229: template(name="DynStatsError" type="string" string="fromhost=%fromhost% error=%$.inc_status%\n")
230: template(name="Empty" type="string" string="")
##^ expanding file: /etc/rsyslog.d/60-ruleset.conf
  1: # Rules and actions to apply when a specific kind of input is received
  2: # Note extensive use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html
  3: 
  4: 
  5: 
  6: # Customise the settings of the built-in RFC3164 to use extra options to better handle malformed messages
  7: # - Avoid populating syslog tags incorrectly when bad clients don't follow tagging conventions
  8: # - Avoid adding in a pre-pending space in the message field
  9: parser(
 10:   name="custom.rfc3164" type="pmrfc3164"
 11:   force.tagEndingByColon="on"
 12:   remove.msgFirstSpace="on"
 13:   permit.squareBracketsInHostname="off"
 14:   permit.slashesInHostname="on"
 15:   permit.atSignsInHostname="off"
 16: )
 17: 
 18: # Stats
 19: ruleset(name="syslog_stats") {
 20:   # TODO
 21:   # - In future ommit setting these values and simply ommit from message when not relevant
 22:   # - Needed for now due to explicit templating because of issues like https://github.com/rsyslog/rsyslog/issues/2873
 23:   set $.syslog-relay!tls = "false";
 24:   set $.syslog-relay!authenticated-client = "false";
 25:   call central
 26: }
 27: 
 28: # To count message input per source
 29: # Note about reliablity of hostname and fromhost rsyslog properties
 30: # - Can't always trust hostname 
 31: #   - source can send malformed syslog headers
 32: #   - $.hostname is sometimes used to correct for cases where something seems incorrect about the source hostname
 33: #   - $fromhost might be a more reliable metric than $hostname for the above situation
 34: # - Can't always trust fromhost
 35: #   - SNAT might cause fromhost to have the IP of a network device and not the actual host sending the message
 36: # So both hostname nor fromhost can have corner cases that make accounting for the true source inaccurate
 37: # Filtering can affect the per message host count, e.g. more inputs than outputs
 38: dyn_stats(name="msg_per_fromhost_remote_in_udp_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 39: dyn_stats(name="msg_per_fromhost_remote_in_tcp_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 40: dyn_stats(name="msg_per_fromhost_remote_in_tcp_secure_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 41: dyn_stats(name="msg_per_fromhost_remote_in_relp_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 42: dyn_stats(name="msg_per_fromhost_remote_in_relp_secure_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 43: dyn_stats(name="msg_per_fromhost_remote_in_relp_secure_client_auth_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 44: # To count messages processed at the start of the output ruleset (before output filtering)
 45: dyn_stats(name="msg_per_fromhost" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 46: 
 47: # Input related rulesets
 48: # Input filter rules are placed in filter/*.conf and should be conditions that drop (stop) messages from being processed futher
 49: 
 50: ruleset(name="remote_in_udp" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 51:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_udp_pre_filter", $fromhost);
 52:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 53:   if ($.inc_status != 0) then { 
 54:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 55:   }
 56:   set $.syslog-relay!tls = "false";
 57:   set $.syslog-relay!authenticated-client = "false";
 58:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 59:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
 60:   call central
 61: }
 62: 
 63: ruleset(name="remote_in_tcp" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 64:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_tcp_pre_filter", $fromhost);
 65:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 66:   if ($.inc_status != 0) then { 
 67:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 68:   }
 69:   set $.syslog-relay!tls = "false";
 70:   set $.syslog-relay!authenticated-client = "false";
 71:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 72:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
 73:   call central
 74: }
 75: 
 76: ruleset(name="remote_in_tcp_secure" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 77:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_tcp_secure_pre_filter", $fromhost);
 78:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 79:   if ($.inc_status != 0) then { 
 80:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 81:   }
 82:   set $.syslog-relay!tls = "true";
 83:   set $.syslog-relay!authenticated-client = "false";
 84:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 85:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
 86:   call central
 87: }
 88: 
 89: ruleset(name="remote_in_relp" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 90:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_pre_filter", $fromhost);
 91:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 92:   if ($.inc_status != 0) then {
 93:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 94:   }
 95:   set $.syslog-relay!tls = "false";
 96:   set $.syslog-relay!authenticated-client = "false";
 97:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 98:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
 99:   call central
100: }
101: 
102: # NB: rsyslog limitation seems to block RELP TLS without client authentication
103: ruleset(name="remote_in_relp_secure" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
104:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_secure_pre_filter", $fromhost);
105:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
106:   if ($.inc_status != 0) then {
107:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
108:   }
109:   set $.syslog-relay!tls = "true";
110:   set $.syslog-relay!authenticated-client = "false";
111:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
112:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
113:   call central
114: }
115: 
116: ruleset(name="remote_in_relp_secure_client_auth" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
117:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_secure_client_auth_pre_filter", $fromhost);
118:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
119:   if ($.inc_status != 0) then {
120:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
121:   }
122:   set $.syslog-relay!tls = "true";
123:   set $.syslog-relay!authenticated-client = "true";
124:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
125:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
126:   call central
127: }
128: 
129: # Ouptut rulesets
130: # Rules to output and forward / relay messages placed in output/*.conf and called below
131: 
132: ruleset(
133:   name="central"
134:   # queue config
135:   queue.type="FixedArray"
136:   queue.size="100000"
137:   queue.dequeueBatchSize="5000"
138:   queue.minDequeueBatchSize="50"
139:   queue.minDequeueBatchSize.timeout="100"
140:   queue.workerThreads="4"
141:   queue.workerThreadMinimumMessages="20000"
142: ) {
143: 
144:   set $.inc_status = dyn_inc("msg_per_fromhost", $fromhost);
145:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
146:   if ($.inc_status != 0) then { 
147:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
148:   }
149: 
150:   # Add metadata about how the message was received and compensate for malformed messages
151:   # TODO: Copy and create properties in a nested metadata json subelement called "syslog-relay"
152:   # Note:
153:   # - Copying properties is less efficient.
154:   # - But this could simplify manually constructing JSON output with complex templates...
155:   # - `$!` can be output without needing to know exactly which JSON fields are present or not allowing more dynamic attributes for messages.
156:   # There are issues formatting nested JSON output and items commented out due to limitations:
157:   # - Instead, explicit / manual templating for JSON is the current workaround.
158:   # - See https://github.com/rsyslog/rsyslog/issues/2873
159:   # - See https://github.com/rsyslog/rsyslog/issues/2827
160:   # Commented out due to above limitations
161:   #set $.syslog-relay!timegenerated = format_time($timegenerated, "date-rfc3339");
162:   #set $.syslog-relay!fromhost = $fromhost;
163:   #set $.syslog-relay!fromhost-ip = $fromhost-ip;
164:   #set $.syslog-relay!myhostname = $$myhostname;
165:   #set $.syslog-relay!inputname = $inputname;
166:   if ($protocol-version == "1") then {
167:     # When rsyslog parses a message as version 1 / RFC5424, it implies parsing worked, but sometimes not all fields can be parsed.
168:     set $.syslog-relay!pri-valid = "true";
169:     # Detect malformed RFC5424 messages with bad timestamps which cause the 'programname' to be set as an empty string.
170:     # E.g. '<14>1 2017-09-21 23:43:29 behave test 99999 - incorrect non-IS08601 timestamp with extra space'
171:     if ($programname == "") then {
172:       set $.syslog-relay!format = "RFC5424_malformed";
173:       set $.syslog-relay!header-valid = "false";
174:     } else {
175:       set $.syslog-relay!format = "RFC5424";
176:       set $.syslog-relay!header-valid = "true";
177:     }
178:     # If rsyslog can't parse the timestamp or hostname for RFC5424, it seems to populate $hostname automatically from $fromhost
179:     set $.hostname = $hostname;
180:     set $.app-name = $app-name;
181:   } else if ($app-name == "rsyslogd-pstats" and ($fromhost-ip == "127.0.0.1" or $fromhost-ip == "::1" )) then {
182:       # Catch corner case where rsyslog impstats produces valid header properties, but the rawmsg field doesn't include the standard syslog header because it's internal
183:       set $.syslog-relay!format = "NA_internal_rsyslogd-pstats";
184:       set $.syslog-relay!pri-valid = "false";
185:       set $.syslog-relay!header-valid = "false";
186:       set $.hostname = $hostname;
187:   } else {
188:     # assume protocol-version == 0
189:     # check priority
190:     # 0-191 are valid priority encodings, set to 192 > 191 to indicate invalid
191:     set $.pri-test = cnum(re_extract($rawmsg, "^<([0-9]{1,3})>", 0, 0, "192"));
192:     if ($.pri-test > 191) then {
193:       set $.syslog-relay!format = "RFC3164_malformed";
194:       set $.syslog-relay!pri-valid = "false";
195:       set $.hostname = $fromhost;
196:     } else {
197:       set $.syslog-relay!pri-valid = "true";
198:     }
199:     # Check syslog header (date and hostname)
200:     # - See https://github.com/rsyslog/rsyslog/issues/1789
201:     # - Regex is costly, so skim for 'Mmm' pattern of date (but don't match to actual months)
202:     # - Besides the date pre-check, use a trick to see if rsyslog assumed the very first part of the message after the priority was the hostname or the application name / syslog tag. If it does, it's likely not a conventional header.
203:     #   - The RFC3164 parser behaviour is susceptible to assigning the start of malformed message data as a hostname or an application/process name.
204:     #   - If the RFC3164 parser is unable to parse a timestamp, it will try parse the first part as a hostname instead.
205:     #       - Rather disregard the unstrustworthy assumptions about the best-effort parsing and use the fromhost property when this happens.
206:     #   - If the RFC3164 parser is then unable to parse a hostname, it will try parse the header as just the syslog tag and application name/process name.
207:     #       - Discard this guess and rather set the app-name to none (`-`) if it does not seem to a valid tag before the colon.
208:     #       - TODO: we may also need to sanitise the process name?
209:     if (not re_match($rawmsg-after-pri, '^[A-Z][a-z]{2}') or $rawmsg-after-pri startswith $hostname or $rawmsg-after-pri startswith $syslogtag) then {
210:       # rsyslog assumed first word of malformed message was the hostname, so RFC3164 conventions for timestamp and hostname not followed
211:       set $.syslog-relay!format = "RFC3164_malformed";
212:       set $.syslog-relay!header-valid = "false";
213:       set $.hostname = $fromhost;
214:       # Is the syslog tag and app-name vaguely valid?
215:       # Expect the process name to start with alphanumeric characters, an underscore opening bracket and allow it to contain more alphanumerics and a few special characters commonly seen in use with process names.
216:       # However, reject app-names that are only numbers
217:       # Regex supplied via string constants requires double escaping for the rainerscript string constant and the regex escape. E.g. regex escaped backslash \\ is double escaped as \\\\ for rainerscript. See: https://www.rsyslog.com/rainerscript-constant-string-escaper/.
218:       if (re_match($syslogtag, '^[A-Za-z0-9_(][A-Za-z0-9_()\\-\\./\\\\]{1,31}(\\[[0-9]+\\])?:$') and not re_match($app-name, '^[0-9]+$')) then {
219:         set $.app-name = $app-name;
220:       } else {
221:         set $.app-name = "-";
222:       }
223:       # If we wanted to correct a misaligned $msg due to a bad header... Failing to do this may swallow part of the malformed message where the parsed values were untrusted and discarded.
224:       #set $.msg = $rawmsg-after-pri;
225:     } else {
226:       set $.syslog-relay!format = "RFC3164";
227:       # above checks not 100% precise to avoid performance cost, so only reasonably confident a good header was found
228:       set $.syslog-relay!header-valid = "true";
229:       set $.hostname = $hostname;
230:       set $.app-name = $app-name;
231:       #set $.msg = $msg;
232:     }
233:     # TODO check for valid app-name and processs ID values?
234:   }
235: 
236:   # Parse RFC5424 structured elements into JSON
237:   if ($structured-data == "-") then {
238:     # !rfc5424-sd won't be created if there's no structured data, but a template might expect it to exist. See https://github.com/rsyslog/rsyslog/issues/1891
239:     # Note rsyslog json properties don't yet support setting a proper JSON null value, so use a string
240:     set $!rfc5424-sd = "null";
241:   } else {
242:     # jsonRoot doesn't change the name of where fields are parsed to. It just moves where it is put. See https://github.com/rsyslog/rsyslog/issues/1262
243:     #action(type="mmpstrucdata" name="output_mmpstrucdata" jsonRoot="$!structured-data")
244:     action(type="mmpstrucdata" name="output_mmpstrucdata")
245:     # Guard against $!rfc5424-sd not existing if there was a parse failure
246:     # Note, rsyslog has not yet got an exits() function, so workaround is to check for a blank string: https://github.com/rsyslog/rsyslog/issues/970
247:     if ($!rfc5424-sd == "") then {
248:       set $!rfc5424-sd = "null";
249:       set $.syslog-relay!format = "RFC5424_malformed";
250:     }
251:   }
252: 
253:   # Support trying to decode msg part as JSON (hopefully fails fast when not JSON)
254:   # - nullify $!msg-json if there is a failure
255:   # - null is represented as the literal string "null" and requires care with templates to output as a true JSON null datatype
256:   # By default, require the @cee cookie
257:   action(type="mmjsonparse" name="mmjsonparse_cee")
258:   if $parsesuccess == "OK" then {
259:     set $.syslog-relay!json-msg-parsed = "true";
260:     continue
261:   } else {
262:     # Also try parsing message as JSON without the @cee cookie
263:     # - mmjsonparse will fail to decode messages that have both structured data elements and JSON without a @cee cookie
264:     action(type="mmjsonparse" name="mmjsonparse_without_cee" cookie="")
265:     if $parsesuccess == "OK" then {
266:       set $.syslog-relay!json-msg-parsed = "true";
267:     } else {
268:       # remove duplicated $!msg field (will use $msg in templates instead)
269:       unset $!msg;
270:       set $.syslog-relay!json-msg-parsed = "false";
271:     }
272:   }
273: 
274:   # global output filter
275:   $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
##^ expanding file: /etc/rsyslog.d/output/filters/exclude_debug.conf
  1: # don't permit debug level logging
  2: if ( $syslogseverity == '7' ) then { stop }
##^ expanding file: /etc/rsyslog.d/output/filters/include_all.conf
  1: # tests white-list approach where this regex matches everything
  2: if (not re_match($msg, '.*')) then { stop }
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
276: 
277:   # Standard outputs "pre-bundled
278:   call out_file
279:   call fwd_kafka
280:   call fwd_syslog
281:   call fwd_syslog_udp_spoof
282:   call fwd_json
283: 
284:   # Add extra output ruleset call for extra conf
285:   call fwd_extra
286: 
287: }
##> end of expand directive: include(file="/etc/rsyslog.d/*.conf" mode="optional")
 13: include(file="/etc/rsyslog.d/input/*.conf" mode="optional")
##< start of include directive: include(file="/etc/rsyslog.d/input/*.conf" mode="optional")
##^ expanding file: /etc/rsyslog.d/input/41-udp_in.conf
  1: module(
  2:   load="imudp"
  3:   BatchSize="128"
  4:   threads="2"
  5:   SchedulingPolicy="fifo"
  6:   SchedulingPriority="10"
  7: )
  8: 
  9: # provides UDP syslog resception
 10: input(
 11:   type="imudp"
 12:   port="514"
 13:   RcvBufSize="0"
 14:   RateLimit.Interval="0"
 15:   RateLimit.Burst="262144"
 16:   ruleset="remote_in_udp"
 17: )
##^ expanding file: /etc/rsyslog.d/input/42-tcp_in.conf
  1: # Note:
  2: # - RSyslog TCP relies on a stream driver, and the stream driver settings are global because they are set when the module is imtcp module is loaded.
  3: # - Therefore, there cannot be varied TLS security requirements for multiple TCP TLS inputs.
  4: # - There don't seem to be any documented settings for TLS client auth as optional (it's either required or not).
  5: 
  6: # Global directives related to TCP
  7: global(
  8:   # TCP TLS (does not apply to RELP)
  9:   defaultNetstreamDriverCAFile="/usr/local/etc/pki/test/test-ca.cert.pem"
 10:   defaultNetstreamDriverCertFile="/usr/local/etc/pki/test/test-syslog-server.cert.pem"
 11:   defaultNetstreamDriverKeyFile="/usr/local/etc/pki/test/test-syslog-server.key.pem"
 12:   defaultNetstreamDriver="ptcp"
 13: )
 14: 
 15: # For plain TCP without TLS (tailored for high performance on Linux)
 16: module(
 17:   load="imptcp"
 18:   threads="4"
 19:   processOnPoller="off"
 20: )
 21: # For TCP with TLS (imptcp does not support TLS)
 22: module(
 23:   load="imtcp"
 24:   maxSessions="1000"
 25:   KeepAlive="off"
 26:   flowControl="on"
 27:   NotifyOnConnectionClose="off"
 28:   streamDriver.name="gtls"
 29:   #streamDriver.name="ossl"
 30:   streamDriver.mode="1"
 31:     #This indicates TLS is enabled. 0 indicated disabled.
 32:   streamDriver.authMode="anon"
 33:   
 34: )
 35: 
 36: # provides plain TCP syslog reception. Both port 514 and 601 (IANA offical registered number)
 37: input(
 38:   type="imptcp"
 39:   port="514"
 40:   ruleset="remote_in_tcp"
 41:   SocketBacklog="128"
 42:   KeepAlive="off"
 43:   flowControl="on"
 44:   NotifyOnConnectionOpen="off"
 45:   NotifyOnConnectionClose="off"
 46:   RateLimit.Interval="0"
 47:   RateLimit.Burst="262144"
 48: )
 49: input(
 50:   type="imptcp"
 51:   port="601"
 52:   ruleset="remote_in_tcp"
 53:   SocketBacklog="128"
 54:   KeepAlive="off"
 55:   flowControl="on"
 56:   NotifyOnConnectionOpen="off"
 57:   NotifyOnConnectionClose="off"
 58:   RateLimit.Interval="0"
 59:   RateLimit.Burst="262144"
 60: )
 61: 
 62: # provides secure TCP syslog reception
 63: input(
 64:   type="imtcp"
 65:   name="tcp_secure"
 66:   port="6514"
 67:   RateLimit.Interval="0"
 68:   RateLimit.Burst="262144"
 69:   ruleset="remote_in_tcp_secure"
 70: )
##^ expanding file: /etc/rsyslog.d/input/43-relp_in.conf
  1: # RELP and librelp seems to support it's own TLS settings per input. Therefore, there can be varied TLS security requirements (e.g. needing client auth) per RELP input and port.
  2: 
  3: module(
  4:   load="imrelp"
  5:   #tls.tlslib="openssl"
  6: )
  7: 
  8: # proivdes RELP reception without TLS
  9: input(
 10:   type="imrelp"
 11:   name="imrepl"
 12:   port="2514"
 13:   ruleset="remote_in_relp"
 14:   KeepAlive="off"
 15:   tls="off"
 16: )
 17: 
 18: # provides secure RELP reception (with client not needing to provide a CA signed cert)
 19: # Limitation:
 20: # - even if tls.authMode is not set, RELP GnuTLS implimentation seems to default requesting a client certifcate
 21: # - might be fixed in future: https://github.com/rsyslog/rsyslog/issues/435
 22: input(
 23:   type="imrelp"
 24:   name="imrelp_secure"
 25:   port="7514"
 26:   ruleset="remote_in_relp_secure"
 27:   KeepAlive="off"
 28:   tls="on"
 29:   tls.dhbits="2048"
 30:   tls.caCert="/usr/local/etc/pki/test/test-ca.cert.pem"
 31:   tls.myCert="/usr/local/etc/pki/test/test-syslog-server.cert.pem"
 32:   tls.myPrivKey="/usr/local/etc/pki/test/test-syslog-server.key.pem"
 33:   #tls.authMode="anon"
 34: )
 35: 
 36: # provides secure RELP reception (with client needing to provide a CA signed cert)
 37: input(
 38:   type="imrelp"
 39:   name="imrelp_secure_client_auth"
 40:   port="8514"
 41:   ruleset="remote_in_relp_secure_client_auth"
 42:   KeepAlive="off"
 43:   tls="on"
 44:   tls.dhbits="2048"
 45:   tls.caCert="/usr/local/etc/pki/test/test-ca.cert.pem"
 46:   tls.myCert="/usr/local/etc/pki/test/test-syslog-server.cert.pem"
 47:   tls.myPrivKey="/usr/local/etc/pki/test/test-syslog-server.key.pem"
 48:   tls.authMode="certvalid"
 49:   
 50:   tls.permittedPeer=["*"]
 51:   
 52: )
##> end of expand directive: include(file="/etc/rsyslog.d/input/*.conf" mode="optional")
 14: include(file="/etc/rsyslog.d/output/*.conf" mode="optional")
##< start of include directive: include(file="/etc/rsyslog.d/output/*.conf" mode="optional")
##^ expanding file: /etc/rsyslog.d/output/71-out_file.conf
  1: ## Option to write remote logs to plain files
  2: # Note further, it would be prudent to setup logrotate for /var/log/remote/*
  3: # See 50-ruleset.conf for the parent ruleset that calls this
  4: # This will be blank if rsyslog_omfile_enabled="on" is not set
  5: 
  6: # Avoid using invalid hostnames if possible (meta-data enabled)
  7: template(name="TmplPerHostFile" type="string" string="/var/log/remote/%$.hostname%")
  8: 
  9: 
 10: # Dynamic stats for output
 11: dyn_stats(name="msg_per_fromhost_out_file_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 12: 
 13: ruleset(name="out_file") {
 14: 
 15:   $IncludeConfig /etc/rsyslog.d/output/filters/out_file/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/out_file/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/out_file/*.conf
 16: 
 17:   set $.inc_status = dyn_inc("msg_per_fromhost_out_file_post_filter", $fromhost);
 18:   # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 19:   if ($.inc_status != 0) then { 
 20:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 21:   }
 22: 
 23:   # In the simple case, we use the hostname as the filename and place all logs in that file
 24:   action(
 25:        name="out_file_remote_in_file_hostname"
 26:        type="omfile"
 27:        template="TmplRSyslogJSON"
 28:        dynaFile="TmplPerHostFile"
 29:        dynaFileCacheSize="100"
 30:        asyncWriting="on"
 31:        flushOnTXEnd="off"
 32:        ioBufferSize="256k"
 33:        dirOwner="root"
 34:        dirGroup="wheel"
 35:        DirCreateMode="0755"
 36:        fileOwner="root"
 37:        fileGroup="wheel"
 38:        FileCreateMode="0644"
 39:   )
 40: 
 41:   
 42: }##^ expanding file: /etc/rsyslog.d/output/81-fwd_kafka.conf
  1: # Kafka output (if enabled, else blank)
  2: 
  3: 
  4: module(load="omkafka")
  5: 
  6: # Dynamic stats for output
  7: dyn_stats(name="msg_per_fromhost_fwd_kafka_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
  8: 
  9: ruleset(name="fwd_kafka")
 10: {
 11:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_kafka/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_kafka/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_kafka/*.conf
 12: 
 13:   set $.inc_status = dyn_inc("msg_per_fromhost_fwd_kafka_post_filter", $fromhost);
 14:   if ($.inc_status != 0) then {
 15:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 16:   }
 17: 
 18:   action(
 19:     name="fwd_kafka_topic_test_syslog"
 20:     type="omkafka"
 21:     broker=["test-kafka:9092"]
 22:     confParam=["batch.num.messages=1", "queue.buffering.max.ms=100", "sasl.mechanisms=PLAIN", "sasl.username=test", "sasl.password=test-secret", "security.protocol=sasl_ssl", "ssl.ca.location=/usr/local/etc/pki/test/test-ca.cert.pem", "ssl.key.location=/usr/local/etc/pki/test/test-syslog-server.key.pem", "ssl.certificate.location=/usr/local/etc/pki/test/test-syslog-server.cert.pem"]
 23:     topic="test_syslog"
 24:     dynatopic="off"
 25:     partitions.auto="on"
 26:     
 27:     resubmitOnFailure="on"
 28:     keepFailedMessages="on"
 29:     failedMsgFile="/var/lib/rsyslog/kafka_failed.msg"
 30:     template="TmplJSON"
 31:     action.resumeRetryCount="-1"
 32:     # queue config
 33:     queue.type="LinkedList"
 34:     queue.filename="fwd_kafka"
 35:     # queue peristance and size limit
 36:     queue.maxDiskSpace="1073741824"
 37:     queue.maxFileSize="128m"
 38:     queue.size="100000"
 39:     queue.lightDelayMark="0"
 40:     queue.discardMark="95000"
 41:     queue.discardSeverity="7"
 42:     queue.checkpointInterval="10000"
 43:     queue.saveOnShutdown="on"
 44:     # queue threads and batching
 45:     queue.dequeueBatchSize="5000"
 46:     queue.minDequeueBatchSize="50"
 47:     queue.minDequeueBatchSize.timeout="100"
 48:     queue.workerThreads="4"
 49:     queue.workerThreadMinimumMessages="20000"
 50:   )
 51: }
##^ expanding file: /etc/rsyslog.d/output/82-fwd_syslog.conf
  1: # Syslog forwarding output (if enabled, else blank)
  2: 
  3: 
  4: # Standard syslog forwarding. 
  5: # omfwd module is loaded by deafault / built-in
  6: 
  7: # Dynamic stats for output
  8: dyn_stats(name="msg_per_fromhost_fwd_syslog_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
  9: 
 10: ruleset(name="fwd_syslog")
 11: {
 12:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
##^ expanding file: /etc/rsyslog.d/output/filters/fwd_syslog/exclude_complex.conf
  1: # Test blacklist approach with complex regex (note, rsyslog re_match uses POSIX ERE)
  2: # E.g. 'client\s@0x[a-f0-9]+\s10\.((254\.254\.254)|(253\.253\.253))' for PCRE or Python needs double escaping (rsyslog rainerscript and ERE use a backslash as the escape character) and only a limited set of regex syntex applies
  3: if re_match($msg, 'client @0x[a-f0-9]+ 10\\.(254\\.254\\.254)|(253\\.253\\.253)') then { stop }##^ expanding file: /etc/rsyslog.d/output/filters/fwd_syslog/exclude_foobar.conf
  1: # tests black-list approach
  2: if $msg contains 'foobar' then { stop }
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
 13: 
 14:   set $.inc_status = dyn_inc("msg_per_fromhost_fwd_syslog_post_filter", $fromhost);
 15:   if ($.inc_status != 0) then { 
 16:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 17:   }
 18: 
 19:   action(
 20:     name="fwd_syslog_target_test_syslog_relay"
 21:     type="omfwd"
 22:     Target="test_syslog_relay"
 23:     Port="10514"
 24:     Protocol="tcp"
 25:     template="TmplRFC5424Meta"
 26:     action.resumeRetryCount="-1"
 27:     # queue config
 28:     queue.type="LinkedList"
 29:     queue.filename="fwd_syslog"
 30:     # queue peristance and size limit
 31:     queue.maxDiskSpace="1073741824"
 32:     queue.maxFileSize="128m"
 33:     queue.size="100000"
 34:     queue.lightDelayMark="0"
 35:     queue.discardMark="95000"
 36:     queue.discardSeverity="7"
 37:     queue.checkpointInterval="10000"
 38:     queue.saveOnShutdown="on"
 39:     # queue threads and batching
 40:     queue.dequeueBatchSize="5000"
 41:     queue.minDequeueBatchSize="50"
 42:     queue.minDequeueBatchSize.timeout="100"
 43:     queue.workerThreads="4"
 44:     queue.workerThreadMinimumMessages="20000"
 45:   )
 46: }
##^ expanding file: /etc/rsyslog.d/output/83-fwd_syslog_udp_spoof.conf
  1: 
  2: # Special UDP syslog forwarding output relayed with the origin log source IP address spoofed (if enabled, else blank)
  3: 
  4: 
  5: # Useful with downstream systems that don't process the syslog header and assume the network source IP is the original host.
  6: 
  7: Module (
  8:   load="omudpspoof"
  9: )
 10: 
 11: # Dynamic stats for output
 12: dyn_stats(name="msg_per_fromhost_omudpspoof_syslog_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 13: 
 14: ruleset(name="fwd_syslog_udp_spoof")
 15: {
 16:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
##^ expanding file: /etc/rsyslog.d/output/filters/fwd_syslog/exclude_complex.conf
  1: # Test blacklist approach with complex regex (note, rsyslog re_match uses POSIX ERE)
  2: # E.g. 'client\s@0x[a-f0-9]+\s10\.((254\.254\.254)|(253\.253\.253))' for PCRE or Python needs double escaping (rsyslog rainerscript and ERE use a backslash as the escape character) and only a limited set of regex syntex applies
  3: if re_match($msg, 'client @0x[a-f0-9]+ 10\\.(254\\.254\\.254)|(253\\.253\\.253)') then { stop }##^ expanding file: /etc/rsyslog.d/output/filters/fwd_syslog/exclude_foobar.conf
  1: # tests black-list approach
  2: if $msg contains 'foobar' then { stop }
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
 17: 
 18:   set $.inc_status = dyn_inc("msg_per_fromhost_omudpspoof_syslog_post_filter", $fromhost);
 19:   if ($.inc_status != 0) then {
 20:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 21:   }
 22: 
 23:   action(
 24:     name="fwd_syslog_target_test_syslog_relay_udp_spoof"
 25:     type="omudpspoof"
 26:     Target="test_syslog_relay_udp_spoof"
 27:     Port="10514"
 28:     template="TmplRFC5424Meta"
 29:     action.resumeRetryCount="-1"
 30:     # queue config
 31:     queue.type="LinkedList"
 32:     queue.filename="fwd_syslog_omudpspoof"
 33:     # queue peristance and size limit
 34:     queue.maxDiskSpace="1073741824"
 35:     queue.maxFileSize="128m"
 36:     queue.size="100000"
 37:     queue.lightDelayMark="0"
 38:     queue.discardMark="95000"
 39:     queue.discardSeverity="7"
 40:     queue.checkpointInterval="10000"
 41:     queue.saveOnShutdown="on"
 42:     # queue threads and batching
 43:     queue.dequeueBatchSize="5000"
 44:     queue.minDequeueBatchSize="50"
 45:     queue.minDequeueBatchSize.timeout="100"
 46:     queue.workerThreads="4"
 47:     queue.workerThreadMinimumMessages="20000"
 48:   )
 49: }
##^ expanding file: /etc/rsyslog.d/output/84-fwd_json.conf
  1: # JSON output (if enabled, else blank)
  2: 
  3: 
  4: # omfwd module is loaded by deafault / built-in
  5: 
  6: # Dynamic stats for output
  7: dyn_stats(name="msg_per_fromhost_fwd_json_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
  8: 
  9: ruleset(name="fwd_json")
 10: {
 11:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_json/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_json/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_json/*.conf
 12: 
 13:   set $.inc_status = dyn_inc("msg_per_fromhost_fwd_json_post_filter", $fromhost);
 14:   if ($.inc_status != 0) then {
 15:     action(name="dyn_stat_inc_error" type="omfile" file="/var/log/impstats/dyn_stats_inc_error.log" template="DynStatsError")
 16:   }
 17: 
 18:   action(
 19:     name="fwd_json_target_test-json-relay"
 20:     type="omfwd"
 21:     Target="test-json-relay"
 22:     Port="15000"
 23:     Protocol="tcp"
 24:     template="TmplJSONRawMsg"
 25:     action.resumeRetryCount="-1"
 26:     # often last message is lost when a connection breaks
 27:     resendLastMSGOnReconnect="on"
 28:     # queue config
 29:     queue.type="LinkedList"
 30:     queue.filename="fwd_json"
 31:     # queue peristance and size limit
 32:     queue.maxDiskSpace="1073741824"
 33:     queue.size="100000"
 34:     queue.maxFileSize="128m"
 35:     queue.lightDelayMark="0"
 36:     queue.discardMark="95000"
 37:     queue.discardSeverity="7"
 38:     queue.checkpointInterval="10000"
 39:     queue.saveOnShutdown="on"
 40:     # queue threads and batching
 41:     queue.dequeueBatchSize="5000"
 42:     queue.minDequeueBatchSize="50"
 43:     queue.minDequeueBatchSize.timeout="100"
 44:     queue.workerThreads="4"
 45:     queue.workerThreadMinimumMessages="20000"
 46:   )
 47: }
##> end of expand directive: include(file="/etc/rsyslog.d/output/*.conf" mode="optional")
 15: 
 16: # Optional extra custom config to inlcude from volume via /etc/rsyslog.d/extra
 17: include(file="/etc/rsyslog.d/extra/*.conf" mode="optional")
##< start of include directive: include(file="/etc/rsyslog.d/extra/*.conf" mode="optional")
##^ expanding file: /etc/rsyslog.d/extra/91_extra_test.conf
  1: # Example config for own custom input and outputs either independent or integrated with other pre-existing inputs or outputs.
  2: 
  3: module(load="imkafka")
  4: 
  5: # Independent input
  6: # - Doesn't integrate with other existing outputs in /etc/rsyslog.d/output
  7: # - Not affected by any other input filters
  8: input(
  9:   type="imkafka"
 10:   topic="extra_syslog"
 11:   broker=["test-kafka:9092"]
 12:   ConfParam=["batch.num.messages=1", "queue.buffering.max.ms=100", "client.id=rsyslog_extra", "sasl.mechanisms=PLAIN", "sasl.username=test", "sasl.password=test-secret", "security.protocol=sasl_ssl", "ssl.ca.location=/usr/local/etc/pki/test/test-ca.cert.pem", "ssl.key.location=/usr/local/etc/pki/test/test-syslog-server.key.pem", "ssl.certificate.location=/usr/local/etc/pki/test/test-syslog-server.cert.pem"]
 13:   consumergroup="rsyslog_extra"
 14:   ruleset="extra_kafka_input"
 15: )
 16: 
 17: # Independent output
 18: # - Doesn't integrate with other existing inputs in /etc/rsyslog.d/input, except the above input that calls it.
 19: # - Not affected by any other output filters
 20: # - But does depend on a template already defined in 60-output_format.conf
 21: ruleset(name="extra_kafka_input" parser="rsyslog.pmnull") {
 22:   action(
 23:     type="omfile"
 24:     template="RawMsg"
 25:     fileCreateMode="0644"
 26:     file="/var/log/remote/extra_kafka_input.log"
 27:   )
 28: }
 29: 
 30: # Integrated extra output
 31: # - env var rsyslog_call_fwd_extra_rule=true must be set
 32: # - Then /etc/rsyslog.d/60-output_format.conf should call this ruleset after the other pre-defined outputs
 33: # - Expects the ruleset with name `fwd_extra` to be defined in a file in /etc/rsyslog.d/extra/ and rsyslog will fail to start if it is missing
 34: # - Will be affected by global output filters in /etc/rsyslog.d/output/filters/*
 35: # - Input filters will also apply
 36: # - Useful for testing template options. Other user read access is needed for the non-root behave process to read these files.
 37: ruleset(name="fwd_extra") {
 38:   action(
 39:     type="omfile"
 40:     template="RawMsg"
 41:     fileCreateMode="0644"
 42:     file="/var/log/remote/all_raw.log"
 43:   )
 44:   action(
 45:     type="omfile"
 46:     template="RawMsgEndMetaShort"
 47:     fileCreateMode="0644"
 48:     file="/var/log/remote/all_raw_end_meta.log"
 49:   )
 50: }
 51: 
 52: # Integrated extra input
 53: # - To plug input into pre-defined outputs of /etc/rsyslog.d/output/, must set ruleset="central"
 54: # - Then, global input filters from /etc/rsyslog.d/input/filters/* will apply
 55: # - And, global output filters from /etc/rsyslog.d/output/filters/* will apply
 56: module(load="imfile")
 57: input(
 58:   type="imfile"
 59:   File="/tmp/test_imfile"
 60:   PersistStateInterval="60"
 61:   freshStartTail="on"
 62:   Tag="test_imfile:"
 63:   Severity="info"
 64:   Facility="local7"
 65:   ruleset="central"
 66: )
##> end of expand directive: include(file="/etc/rsyslog.d/extra/*.conf" mode="optional")
