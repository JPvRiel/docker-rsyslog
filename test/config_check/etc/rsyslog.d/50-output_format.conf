# Output templates
# Built-in templates at https://www.rsyslog.com/doc/v8-stable/configuration/templates.html#reserved-template-names
# E.g.
# - RSYSLOG_TraditionalFileFormat
# - RSYSLOG_FileFormat
# - RSYSLOG_TraditionalForwardFormat
# - RSYSLOG_SyslogProtocol23Format

# Simple raw message template (might be useful for passing on messages unprocessed)
template(name="RawMsg" type="string" string="%rawmsg%\n")

# Misc templates (e.g. for calling via exec_template)
# TODO: If need be

# Standard example of RFC5424
# Note, RSYSLOG_SyslogProtocol23Format is the built-in reserved template name for a draft of RFC5424, so the above is more or less identical to that
template(name="TmplRFC5424" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %hostname% %app-name% %procid% %msgid% %structured-data% %msg%\n")

# RFC5424 with syslog relay and own custom meta-data pre-pended to the structured data element
# Like RSYSLOG_SyslogProtocol23Format, but with a special extra structured data field to append structured data.
# Use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html
# Regex needed to deal with structured data being null '-' and needing to append/replace null.
# `%structured-data:R,ERE,0,BLANK:[[].*--end%` avoids appending a null char '-' if there wasn't any pre-existing structured data.
# See http://www.rsyslog.com/doc/v8-stable/configuration/nomatch.html
template(name="TmplRFC5424Meta" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %$.hostname% %app-name% %procid% %msgid% [syslog-relay@16543 timegenerated=\"%timegenerated:::date-rfc3339%\" fromhost=\"%fromhost%\" fromhost-ip=\"%fromhost-ip%\" myhostname=\"%$myhostname%\" inputname=\"%inputname%\" format=\"%$.syslog-relay!format%\" pri-valid=\"%$.syslog-relay!pri-valid%\" header-valid=\"%$.syslog-relay!header-valid%\" json-msg-parsed=\"%$.syslog-relay!json-msg-parsed%\" tls=\"%$.syslog-relay!tls%\" authenticated-client=\"%$.syslog-relay!authenticated-client%\"]%structured-data:R,ERE,0,BLANK:[[].*--end% %msg%\n")
template(name="RawMsgEndMeta" type="string" string="%rawmsg% @meta:[timegenerated=\"%timegenerated:::date-rfc3339%\", fromhost=\"%fromhost%\", fromhost-ip=\"%fromhost-ip%\", myhostname=\"%$myhostname%\", inputname=\"%inputname%\", format=\"%$.syslog-relay!format%\", pri-valid=\"%$.syslog-relay!pri-valid%\", header-valid=\"%$.syslog-relay!header-valid%\", json-msg-parsed=\"%$.syslog-relay!json-msg-parsed%\", tls=\"%$.syslog-relay!tls%\", authenticated-client=\"%$.syslog-relay!authenticated-client%\"]\n")
template(name="RawMsgEndMetaShort" type="string" string="%rawmsg% @meta:[fromhost=\"%fromhost%\", fromhost-ip=\"%fromhost-ip%\"]\n")

# JSON templates

# Make sure the message content is escaped to be safely interpreted as JSON
# Note:
# - NB! Rainerscript only supports setting quoted variables and, while jsonf can now outputs specific JSON data types after https://github.com/rsyslog/rsyslog/issues/2827 was closed, those features are not available to the simpler string type templates and can only be used with list type templates.
# - The template jsonf datatype option can be used in templates to coerce types upon output, but rainerscript config still treats/reads everything like strings.
# - To get integer or boolean JSON types requires manually building a JSON field, i.e. otherwise { "boolean": true } gets quoted as { "boolean": "true" } or using and awkward combination of abuseing the cnum() function, e.g. 'set $.myprop = cnum(0)', and then using 'property(name="$.myprop" outname="myprop" format="jsonf" datatype="bool")'
# - The 'bool' datatype does not treat string "false" as a literal false and only interprets "0" or the empty string "" as false.
# - Therefore it's not adaptable to use for non-JSON output that needs a literal string 'false'.
# - See https://github.com/rsyslog/rsyslog/issues/3836
# - See https://www.rsyslog.com/doc/v8-stable/configuration/templates.html#property-statement
# Due to this, and some values being used in both JSON and plaintext output template choices, manually crafted templates instead of using a jsonf datatype is performed.
# While bool and int JSON types are used, for RFC5424, `-` represents null and is left as when the field is flat (not a nested object).
# Structured data element handling is complex and involves 2 different fields
# - 'structured-data' will be the string representation (not parsed to JSON) and null represented as string character `-`.
# - 'rfc5424-sd' will be the JSON parsed nested object (if rsyslog_mmpstrucdata is enabled) and null represented as literal string `"null"`
# - If the structured data element is `-` it's 'structured-data' property is left as a string `-` else
# - Downstream systems like elasticsearch will have data mapping conflicts if it expects a json object (e.g. nested field) but instead gets a plain string (e.g. `"null"`). Logstash can coerce/remove the "null" field when present to avoid the issue.

# Output the full native rsyslog JSON message object
template(name="TmplRSyslogJSON" type="string" string="%jsonmesg%\n")

# Output a subset of the native rsyslog JSON message fields
# Note:
# - JSON $! tree output will output empty enclosing brackets { } if $! doesn't have any JSON values set which will cause invalid JSON, so strip these by removing first 2 chars '{ ' and allowing the end closing bracket to occur in case this is indeed empty.
# - Handle cases where metadata or structured data is to be added
# - if metadata is enabled, RFC3164 assumed hostname parsing that might be incorrect are replaced with local var $.hostname = $fromhost instead of standard $hostname property when headers are detected as non-conformant
# - now that JSON types are formally supported, be more explicit with data types
template(name="TmplJSON" type="list") {
  constant(value="{ ")
  property(name="syslogfacility" format="jsonf" datatype="number")
  constant(value=", ")
  property(name="syslogfacility-text" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity" format="jsonf" datatype="number")
  constant(value=", ")
  property(name="syslogseverity-text" format="jsonf")
  constant(value=", ")
  property(name="timestamp" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="$.hostname" outname="hostname" format="jsonf")
  constant(value=", ")
  property(name="app-name" format="jsonf")
  constant(value=", ")
  property(name="procid" format="jsonf" datatype="string")
  constant(value=", ")
  property(name="msgid" format="jsonf" datatype="string")
  constant(value=", ")
  constant(value="\"syslog-relay\": { ")
  property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="fromhost" format="jsonf")
  constant(value=", ")
  property(name="fromhost-ip" format="jsonf")
  constant(value=", \"myhostname\":\"")
  property(name="$myhostname" format="jsonr")
  constant(value="\", ")
  property(name="inputname" format="jsonf")
  constant(value=", \"format\":\"")
  property(name="$.syslog-relay!format" format="jsonr")
  constant(value="\", \"pri-valid\":")
  property(name="$.syslog-relay!pri-valid")
  constant(value=", \"header-valid\":")
  property(name="$.syslog-relay!header-valid")
  constant(value=", \"json-msg-parsed\":")
  property(name="$.syslog-relay!json-msg-parsed")
  constant(value=", \"tls\":")
  property(name="$.syslog-relay!tls")
  constant(value=", \"authenticated-client\":")
  property(name="$.syslog-relay!authenticated-client")
  constant(value=" }, ")
  
  property(name="msg" format="jsonf")
  constant(value=", ")
  property(name="$!" position.from="2")
  constant(value="\n")
}

template(name="TmplJSONRawMsg" type="list") {
  constant(value="{ ")
  property(name="syslogfacility" format="jsonf" datatype="number")
  constant(value=", ")
  property(name="syslogfacility-text" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity" format="jsonf" datatype="number")
  constant(value=", ")
  property(name="syslogseverity-text" format="jsonf")
  constant(value=", ")
  property(name="timestamp" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="$.hostname" outname="hostname" format="jsonf")
  constant(value=", ")
  property(name="app-name" format="jsonf")
  constant(value=", ")
  property(name="procid" format="jsonf" datatype="string")
  constant(value=", ")
  property(name="msgid" format="jsonf" datatype="string")
  constant(value=", ")
  constant(value="\"syslog-relay\": { ")
  property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="fromhost" format="jsonf")
  constant(value=", ")
  property(name="fromhost-ip" format="jsonf")
  constant(value=", \"myhostname\":\"")
  property(name="$myhostname" format="jsonr")
  constant(value="\", ")
  property(name="inputname" format="jsonf")
  constant(value=", \"format\":\"")
  property(name="$.syslog-relay!format" format="jsonr")
  constant(value="\", \"pri-valid\":")
  property(name="$.syslog-relay!pri-valid")
  constant(value=", \"header-valid\":")
  property(name="$.syslog-relay!header-valid")
  constant(value=", \"json-msg-parsed\":")
  property(name="$.syslog-relay!json-msg-parsed")
  constant(value=", \"tls\":")
  property(name="$.syslog-relay!tls")
  constant(value=", \"authenticated-client\":")
  property(name="$.syslog-relay!authenticated-client")
  constant(value=" }, ")
  
  property(name="rawmsg" format="jsonf")
  constant(value=", ")
  property(name="$!" position.from="2")
  constant(value="\n")
}

template(name="TmplJSONMsgAndRawMsg" type="list") {
  constant(value="{ ")
  property(name="syslogfacility" format="jsonf" datatype="number")
  constant(value=", ")
  property(name="syslogfacility-text" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity" format="jsonf" datatype="number")
  constant(value=", ")
  property(name="syslogseverity-text" format="jsonf")
  constant(value=", ")
  property(name="timestamp" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="$.hostname" outname="hostname" format="jsonf")
  constant(value=", ")
  property(name="app-name" format="jsonf")
  constant(value=", ")
  property(name="procid" format="jsonf" datatype="string")
  constant(value=", ")
  property(name="msgid" format="jsonf" datatype="string")
  constant(value=", ")
  constant(value="\"syslog-relay\": { ")
  property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="fromhost" format="jsonf")
  constant(value=", ")
  property(name="fromhost-ip" format="jsonf")
  constant(value=", \"myhostname\":\"")
  property(name="$myhostname" format="jsonr")
  constant(value="\", ")
  property(name="inputname" format="jsonf")
  constant(value=", \"format\":\"")
  property(name="$.syslog-relay!format" format="jsonr")
  constant(value="\", \"pri-valid\":")
  property(name="$.syslog-relay!pri-valid")
  constant(value=", \"header-valid\":")
  property(name="$.syslog-relay!header-valid")
  constant(value=", \"json-msg-parsed\":")
  property(name="$.syslog-relay!json-msg-parsed")
  constant(value=", \"tls\":")
  property(name="$.syslog-relay!tls")
  constant(value=", \"authenticated-client\":")
  property(name="$.syslog-relay!authenticated-client")
  constant(value=" }, ")
  
  property(name="msg" format="jsonf")
  constant(value=", ")
  property(name="rawmsg" format="jsonf")
  constant(value=", ")
  property(name="$!" position.from="2")
  constant(value="\n")
}

# Special templates for handling rsyslog errors
template(name="DynStatsError" type="string" string="fromhost=%fromhost% error=%$.inc_status%\n")
template(name="Empty" type="string" string="")
