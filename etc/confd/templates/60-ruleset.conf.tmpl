# Rules and actions to apply when a specific kind of input is received
# Note extensive use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html

{{ $rsyslog_mmpstrucdata := getenv "rsyslog_mmpstrucdata" | toLower | eq "on" "true" -}}
{{ $rsyslog_mmjsonparse := getenv "rsyslog_mmjsonparse" | toLower | eq "on" "true" -}}
{{ $rsyslog_mmjsonparse_without_cee := getenv "rsyslog_mmjsonparse_without_cee" | toLower | eq "on" "true" -}}
{{ $rsyslog_support_metadata_formats := getenv "rsyslog_support_metadata_formats" | toLower | eq "on" "true" -}}
{{ $rsyslog_input_filtering_enabled := getenv "rsyslog_input_filtering_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_output_filtering_enabled := getenv "rsyslog_output_filtering_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omfile_enabled := getenv "rsyslog_omfile_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omkafka_enabled := getenv "rsyslog_omkafka_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omfwd_syslog_enabled := getenv "rsyslog_omfwd_syslog_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omudpspoof_syslog_enabled := getenv "rsyslog_omudpspoof_syslog_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omfwd_json_enabled := getenv "rsyslog_omfwd_json_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_call_fwd_extra_rule := getenv "rsyslog_call_fwd_extra_rule" | toLower | eq "on" "true" -}}
{{ $rsyslog_impstats := getenv "rsyslog_impstats" | toLower | eq "on" "true" -}}
{{ $rsyslog_dyn_stats := getenv "rsyslog_dyn_stats" | toLower | eq "on" "true" -}}
{{ $rsyslog_dyn_stats_inc_error_reporting := getenv "rsyslog_dyn_stats_inc_error_reporting" | toLower | eq "on" "true" -}}
{{ $rsyslog_dyn_stats_inc_error_reporting_file := getenv "rsyslog_dyn_stats_inc_error_reporting_file" }}

# Customise the settings of the built-in RFC3164 to use extra options to better handle malformed messages
# - Avoid populating syslog tags incorrectly when bad clients don't follow tagging conventions
# - Avoid adding in a pre-pending space in the message field
parser(
  name="custom.rfc3164" type="pmrfc3164"
  force.tagEndingByColon="{{ getenv "rsyslog_pmrfc3164_force_tagEndingByColon" }}"
  remove.msgFirstSpace="{{ getenv "rsyslog_pmrfc3164_remove_msgFirstSpace" }}"
  permit.squareBracketsInHostname="{{ getenv "rsyslog_pmrfc3164_permit_squareBracketsInHostname" }}"
  permit.slashesInHostname="{{ getenv "rsyslog_pmrfc3164_permit_slashInHostname" }}"
  permit.atSignsInHostname="{{ getenv "rsyslog_pmrfc3164_permit_atSignsInHostname" }}"
)

# Stats
{{ if $rsyslog_impstats -}}
ruleset(name="syslog_stats") {
  {{ if $rsyslog_support_metadata_formats -}}
  # TODO
  # - In future ommit setting these values and simply ommit from message when not relevant
  # - Needed for now due to explicit templating because of issues like https://github.com/rsyslog/rsyslog/issues/2873
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end }}
  call central
}

{{ if $rsyslog_dyn_stats -}}
# To count message input per source
# Note about reliablity of hostname and fromhost rsyslog properties
# - Can't always trust hostname 
#   - source can send malformed syslog headers
#   - $.hostname is sometimes used to correct for cases where something seems incorrect about the source hostname
#   - $fromhost might be a more reliable metric than $hostname for the above situation
# - Can't always trust fromhost
#   - SNAT might cause fromhost to have the IP of a network device and not the actual host sending the message
# So both hostname nor fromhost can have corner cases that make accounting for the true source inaccurate
# Filtering can affect the per message host count, e.g. more inputs than outputs
dyn_stats(name="msg_per_fromhost_remote_in_udp_pre_filter" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
dyn_stats(name="msg_per_fromhost_remote_in_tcp_pre_filter" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
dyn_stats(name="msg_per_fromhost_remote_in_tcp_secure_pre_filter" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
dyn_stats(name="msg_per_fromhost_remote_in_relp_pre_filter" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
dyn_stats(name="msg_per_fromhost_remote_in_relp_secure_pre_filter" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
dyn_stats(name="msg_per_fromhost_remote_in_relp_secure_client_auth_pre_filter" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
# To count messages processed at the start of the output ruleset (before output filtering)
dyn_stats(name="msg_per_fromhost" resettable="on" maxCardinality="{{ getenv "rsyslog_dyn_stats_maxCardinality" }}" unusedMetricLife="{{ getenv  "rsyslog_dyn_stats_unusedMetricLife" }}" )
{{- end }}
{{- end }}

# Input related rulesets
# Input filter rules are placed in filter/*.conf and should be conditions that drop (stop) messages from being processed futher

ruleset(name="remote_in_udp" parser={{ getenv "rsyslog_parser" }}) {
  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_udp_pre_filter", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then { 
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}
  {{ if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end }}
  {{ if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
  {{- end }}
  call central
}

ruleset(name="remote_in_tcp" parser={{ getenv "rsyslog_parser" }}) {
  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_tcp_pre_filter", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then { 
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}
  {{ if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end }}
  {{ if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
  {{- end }}
  call central
}

ruleset(name="remote_in_tcp_secure" parser={{ getenv "rsyslog_parser" }}) {
  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_tcp_secure_pre_filter", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then { 
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}
  {{ if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "true";
  set $.syslog-relay!authenticated-client = "false";
  {{- end }}
  {{ if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
  {{- end }}
  call central
}

ruleset(name="remote_in_relp" parser={{ getenv "rsyslog_parser" }}) {
  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_pre_filter", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then {
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}
  {{ if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end }}
  {{ if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
  {{- end }}
  call central
}

# NB: rsyslog limitation seems to block RELP TLS without client authentication
ruleset(name="remote_in_relp_secure" parser={{ getenv "rsyslog_parser" }}) {
  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_secure_pre_filter", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then {
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}
  {{ if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "true";
  set $.syslog-relay!authenticated-client = "false";
  {{- end }}
  {{ if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
  {{- end }}
  call central
}

ruleset(name="remote_in_relp_secure_client_auth" parser={{ getenv "rsyslog_parser" }}) {
  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_secure_client_auth_pre_filter", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then {
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}
  {{ if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "true";
  set $.syslog-relay!authenticated-client = "true";
  {{- end }}
  {{ if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
  {{- end }}
  call central
}

# Ouptut rulesets
# Rules to output and forward / relay messages placed in output/*.conf and called below

ruleset(
  name="central"
  # queue config
  queue.type="{{ getenv "rsyslog_central_queue_type" }}"
  queue.size="{{ getenv "rsyslog_central_queue_size" }}"
  queue.dequeueBatchSize="{{ getenv "rsyslog_central_queue_dequeueBatchSize" }}"
  queue.minDequeueBatchSize="{{ getenv "rsyslog_central_queue_minDequeueBatchSize" }}"
  queue.minDequeueBatchSize.timeout="{{ getenv "rsyslog_central_queue_minDequeueBatchSize_timeout" }}"
  queue.workerThreads="{{ getenv "rsyslog_central_queue_workerThreads" }}"
  queue.workerThreadMinimumMessages="{{ getenv "rsyslog_central_workerThreadMinimumMessages" }}"
) {

  {{ if and $rsyslog_impstats $rsyslog_dyn_stats -}}
  set $.inc_status = dyn_inc("msg_per_fromhost", $fromhost);
  {{ if $rsyslog_dyn_stats_inc_error_reporting -}}
  # TODO - improve action when increment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
  if ($.inc_status != 0) then { 
    action(name="dyn_stat_inc_error" type="omfile" file="{{ $rsyslog_dyn_stats_inc_error_reporting_file }}" template="DynStatsError")
  }
  {{- end }}
  {{- end }}

  {{ if $rsyslog_support_metadata_formats -}}
  # Add metadata about how the message was received and compensate for malformed messages
  # TODO: Copy and create properties in a nested metadata json subelement called "syslog-relay"
  # Note:
  # - Copying properties is less efficient.
  # - But this could simplify manually constructing JSON output with complex templates...
  # - `$!` can be output without needing to know exactly which JSON fields are present or not allowing more dynamic attributes for messages.
  # There are issues formatting nested JSON output and items commented out due to limitations:
  # - Instead, explicit / manual templating for JSON is the current workaround.
  # - See https://github.com/rsyslog/rsyslog/issues/2873
  # - See https://github.com/rsyslog/rsyslog/issues/2827
  # Commented out due to above limitations
  #set $.syslog-relay!timegenerated = format_time($timegenerated, "date-rfc3339");
  #set $.syslog-relay!fromhost = $fromhost;
  #set $.syslog-relay!fromhost-ip = $fromhost-ip;
  #set $.syslog-relay!myhostname = $$myhostname;
  #set $.syslog-relay!inputname = $inputname;
  if ($protocol-version == "1") then {
    # When rsyslog parses a message as version 1 / RFC5424, it implies parsing worked, but sometimes not all fields can be parsed.
    set $.syslog-relay!pri-valid = "true";
    # Detect malformed RFC5424 messages with bad timestamps which cause the 'programname' to be set as an empty string.
    # E.g. '<14>1 2017-09-21 23:43:29 behave test 99999 - incorrect non-IS08601 timestamp with extra space'
    if ($programname == "") then {
      set $.syslog-relay!format = "RFC5424_malformed";
      set $.syslog-relay!header-valid = "false";
    } else {
      set $.syslog-relay!format = "RFC5424";
      set $.syslog-relay!header-valid = "true";
    }
    # If rsyslog can't parse the timestamp or hostname for RFC5424, it seems to populate $hostname automatically from $fromhost
    set $.hostname = $hostname;
    set $.app-name = $app-name;
  {{ if $rsyslog_impstats -}}
  } else if ($app-name == "rsyslogd-pstats" and ($fromhost-ip == "127.0.0.1" or $fromhost-ip == "::1" )) then {
      # Catch corner case where rsyslog impstats produces valid header properties, but the rawmsg field doesn't include the standard syslog header because it's internal
      set $.syslog-relay!format = "NA_internal_rsyslogd-pstats";
      set $.syslog-relay!pri-valid = "false";
      set $.syslog-relay!header-valid = "false";
      set $.hostname = $hostname;
  {{- end }}
  } else {
    # assume protocol-version == 0
    # check priority
    # 0-191 are valid priority encodings, set to 192 > 191 to indicate invalid
    set $.pri-test = cnum(re_extract($rawmsg, "^<([0-9]{1,3})>", 0, 0, "192"));
    if ($.pri-test > 191) then {
      set $.syslog-relay!format = "RFC3164_malformed";
      set $.syslog-relay!pri-valid = "false";
      set $.hostname = $fromhost;
    } else {
      set $.syslog-relay!pri-valid = "true";
    }
    # Check syslog header (date and hostname)
    # - See https://github.com/rsyslog/rsyslog/issues/1789
    # - Regex is costly, so skim for 'Mmm' pattern of date (but don't match to actual months)
    # - Besides the date pre-check, use a trick to see if rsyslog assumed the very first part of the message after the priority was the hostname or the application name / syslog tag. If it does, it's likely not a conventional header.
    #   - The RFC3164 parser behaviour is susceptible to assigning the start of malformed message data as a hostname or an application/process name.
    #   - If the RFC3164 parser is unable to parse a timestamp, it will try parse the first part as a hostname instead.
    #       - Rather disregard the unstrustworthy assumptions about the best-effort parsing and use the fromhost property when this happens.
    #   - If the RFC3164 parser is then unable to parse a hostname, it will try parse the header as just the syslog tag and application name/process name.
    #       - Discard this guess and rather set the app-name to none (`-`) if it does not seem to a valid tag before the colon.
    #       - TODO: we may also need to sanitise the process name?
    if (not re_match($rawmsg-after-pri, '^[A-Z][a-z]{2}') or $rawmsg-after-pri startswith $hostname or $rawmsg-after-pri startswith $syslogtag) then {
      # rsyslog assumed first word of malformed message was the hostname, so RFC3164 conventions for timestamp and hostname not followed
      set $.syslog-relay!format = "RFC3164_malformed";
      set $.syslog-relay!header-valid = "false";
      set $.hostname = $fromhost;
      # Is the syslog tag and app-name vaguely valid?
      # Expect the process name to start with alphanumeric characters, an underscore opening bracket and allow it to contain more alphanumerics and a few special characters commonly seen in use with process names.
      # However, reject app-names that are only numbers
      # Regex supplied via string constants requires double escaping for the rainerscript string constant and the regex escape. E.g. regex escaped backslash \\ is double escaped as \\\\ for rainerscript. See: https://www.rsyslog.com/rainerscript-constant-string-escaper/.
      if (re_match($syslogtag, '^[A-Za-z0-9_(][A-Za-z0-9_()\\-\\./\\\\]{1,31}(\\[[0-9]+\\])?:$') and not re_match($app-name, '^[0-9]+$')) then {
        set $.app-name = $app-name;
      } else {
        set $.app-name = "-";
      }
      # If we wanted to correct a misaligned $msg due to a bad header... Failing to do this may swallow part of the malformed message where the parsed values were untrusted and discarded.
      #set $.msg = $rawmsg-after-pri;
    } else {
      set $.syslog-relay!format = "RFC3164";
      # above checks not 100% precise to avoid performance cost, so only reasonably confident a good header was found
      set $.syslog-relay!header-valid = "true";
      set $.hostname = $hostname;
      set $.app-name = $app-name;
      #set $.msg = $msg;
    }
    # TODO check for valid app-name and processs ID values?
  }
  {{- end }}

  {{ if $rsyslog_mmpstrucdata -}}
  # Parse RFC5424 structured elements into JSON
  if ($structured-data == "-") then {
    # !rfc5424-sd won't be created if there's no structured data, but a template might expect it to exist. See https://github.com/rsyslog/rsyslog/issues/1891
    # Note rsyslog json properties don't yet support setting a proper JSON null value, so use a string
    set $!rfc5424-sd = "null";
  } else {
    # jsonRoot doesn't change the name of where fields are parsed to. It just moves where it is put. See https://github.com/rsyslog/rsyslog/issues/1262
    #action(type="mmpstrucdata" name="output_mmpstrucdata" jsonRoot="$!structured-data")
    action(type="mmpstrucdata" name="output_mmpstrucdata")
    # Guard against $!rfc5424-sd not existing if there was a parse failure
    # Note, rsyslog has not yet got an exits() function, so workaround is to check for a blank string: https://github.com/rsyslog/rsyslog/issues/970
    if ($!rfc5424-sd == "") then {
      set $!rfc5424-sd = "null";
      {{ if $rsyslog_support_metadata_formats -}}
      set $.syslog-relay!format = "RFC5424_malformed";
      {{- end }}
    }
  }
  {{- end }}

  {{ if $rsyslog_mmjsonparse -}}
  # Support trying to decode msg part as JSON (hopefully fails fast when not JSON)
  # - nullify $!msg-json if there is a failure
  # - null is represented as the literal string "null" and requires care with templates to output as a true JSON null datatype
  # By default, require the @cee cookie
  action(type="mmjsonparse" name="mmjsonparse_cee")
  if $parsesuccess == "OK" then {
    {{ if $rsyslog_support_metadata_formats -}}
    set $.syslog-relay!json-msg-parsed = "true";
    {{- end }}
    continue
  } else {
    {{ if $rsyslog_mmjsonparse_without_cee -}}
    # Also try parsing message as JSON without the @cee cookie
    # - mmjsonparse will fail to decode messages that have both structured data elements and JSON without a @cee cookie
    action(type="mmjsonparse" name="mmjsonparse_without_cee" cookie="")
    if $parsesuccess == "OK" then {
      {{ if $rsyslog_support_metadata_formats -}}
      set $.syslog-relay!json-msg-parsed = "true";
      {{- else}}
      continue
      {{- end }}
    } else {
      # remove duplicated $!msg field (will use $msg in templates instead)
      unset $!msg;
      {{ if $rsyslog_support_metadata_formats -}}
      set $.syslog-relay!json-msg-parsed = "false";
      {{- end }}
    }
    {{- else}}
    # remove duplicated $!msg field (will use $msg in templates instead)
    unset $!msg;
    {{ if $rsyslog_support_metadata_formats -}}
    set $.syslog-relay!json-msg-parsed = "false";
    {{- end }}
    {{- end }}
  }
  {{- end }}

  {{ if $rsyslog_output_filtering_enabled -}}
  # global output filter
  $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
  {{- end }}

  # Standard outputs "pre-bundled
  {{ if $rsyslog_omfile_enabled -}}
  call out_file
  {{- end }}
  {{ if $rsyslog_omkafka_enabled -}}
  call fwd_kafka
  {{- end }}
  {{ if $rsyslog_omfwd_syslog_enabled -}}
  call fwd_syslog
  {{- end }}
  {{ if $rsyslog_omudpspoof_syslog_enabled -}}
  call fwd_syslog_udp_spoof
  {{- end }}
  {{ if $rsyslog_omfwd_json_enabled -}}
  call fwd_json
  {{- end }}

  {{ if $rsyslog_call_fwd_extra_rule -}}
  # Add extra output ruleset call for extra conf
  call fwd_extra
  {{- end }}

}
